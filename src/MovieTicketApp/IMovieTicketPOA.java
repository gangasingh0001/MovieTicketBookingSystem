package MovieTicketApp;


/**
* MovieTicketApp/IMovieTicketPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from MovieTicket.idl
* Monday, 6 February, 2023 8:01:20 PM EST
*/

public abstract class IMovieTicketPOA extends org.omg.PortableServer.Servant
 implements MovieTicketApp.IMovieTicketOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("addMovieSlots", new java.lang.Integer (0));
    _methods.put ("removeMovieSlots", new java.lang.Integer (1));
    _methods.put ("listMovieShowsAvailability", new java.lang.Integer (2));
    _methods.put ("bookMovieTickets", new java.lang.Integer (3));
    _methods.put ("getBookingSchedule", new java.lang.Integer (4));
    _methods.put ("cancelMovieTickets", new java.lang.Integer (5));
    _methods.put ("getMoviesListInTheatre", new java.lang.Integer (6));
    _methods.put ("bookTicket", new java.lang.Integer (7));
    _methods.put ("getCustomerBookingList", new java.lang.Integer (8));
    _methods.put ("cancelTicket", new java.lang.Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
           * Permission Set - Admin Only.
           * This method add movie for particular movie if exist in hash map
           * and if the movie does not exist it will create a new movie entry.
           * @param movieId
           * @param movieName
           * @param bookingCapacity
           * @return string If operation successful or not
           */
       case 0:  // MovieTicketApp/IMovieTicket/addMovieSlots
       {
         String movieId = in.read_string ();
         String movieName = in.read_string ();
         int bookingCapacity = in.read_long ();
         String $result = null;
         $result = this.addMovieSlots (movieId, movieName, bookingCapacity);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
           * Permission Set - Admin Only.
           * This method removes the movie if existed.
           * If movie show exist and customer has booked a ticket then
           * movie gets deleted and will book the same movie in next available slot for that customer.
           * @param movieId
           * @param movieName
           * @return string If operation successful or not
           */
       case 1:  // MovieTicketApp/IMovieTicket/removeMovieSlots
       {
         String movieId = in.read_string ();
         String movieName = in.read_string ();
         String $result = null;
         $result = this.removeMovieSlots (movieId, movieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
           * Permission Set - Admin Only.
           * This method shows the availability for a particular movie in all theaters.
           * @param movieName
           * @return string If operation successful or not
           */
       case 2:  // MovieTicketApp/IMovieTicket/listMovieShowsAvailability
       {
         String movieName = in.read_string ();
         String $result = null;
         $result = this.listMovieShowsAvailability (movieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
           * Permission Set - Admin and User.
           * This method is used tp book movie tickets.
           * @param customerID
           * @param movieId
           * @param movieName
           * @param numberOfTickets
           * @return string If operation successful or not
           */
       case 3:  // MovieTicketApp/IMovieTicket/bookMovieTickets
       {
         String customerID = in.read_string ();
         String movieId = in.read_string ();
         String movieName = in.read_string ();
         int numberOfTickets = in.read_long ();
         String $result = null;
         $result = this.bookMovieTickets (customerID, movieId, movieName, numberOfTickets);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
           * Permission Set - Admin and User.
           * This method will get the booking schedule as per customerID from all the different theaters from all area.
           * @param customerID
           * @return string If operation successful or not
           */
       case 4:  // MovieTicketApp/IMovieTicket/getBookingSchedule
       {
         String customerID = in.read_string ();
         String $result = null;
         $result = this.getBookingSchedule (customerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
           * Permission Set - Admin and User.
           * This method will allow cancelling of movie ticket with following parameters.
           * @param customerID
           * @param movieID
           * @param movieName
           * @param numberOfTickets
           * @return
           */
       case 5:  // MovieTicketApp/IMovieTicket/cancelMovieTickets
       {
         String customerID = in.read_string ();
         String movieID = in.read_string ();
         String movieName = in.read_string ();
         int numberOfTickets = in.read_long ();
         String $result = null;
         $result = this.cancelMovieTickets (customerID, movieID, movieName, numberOfTickets);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // MovieTicketApp/IMovieTicket/getMoviesListInTheatre
       {
         String movieName = in.read_string ();
         String $result = null;
         $result = this.getMoviesListInTheatre (movieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // MovieTicketApp/IMovieTicket/bookTicket
       {
         String customerID = in.read_string ();
         String movieId = in.read_string ();
         String movieName = in.read_string ();
         int numberOfTickets = in.read_long ();
         boolean isUserRegisteredToServer = in.read_boolean ();
         String $result = null;
         $result = this.bookTicket (customerID, movieId, movieName, numberOfTickets, isUserRegisteredToServer);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // MovieTicketApp/IMovieTicket/getCustomerBookingList
       {
         String customerID = in.read_string ();
         String $result = null;
         $result = this.getCustomerBookingList (customerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // MovieTicketApp/IMovieTicket/cancelTicket
       {
         String customerID = in.read_string ();
         String movieID = in.read_string ();
         String movieName = in.read_string ();
         int numberOfTickets = in.read_long ();
         String $result = null;
         $result = this.cancelTicket (customerID, movieID, movieName, numberOfTickets);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:MovieTicketApp/IMovieTicket:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public IMovieTicket _this() 
  {
    return IMovieTicketHelper.narrow(
    super._this_object());
  }

  public IMovieTicket _this(org.omg.CORBA.ORB orb) 
  {
    return IMovieTicketHelper.narrow(
    super._this_object(orb));
  }


} // class IMovieTicketPOA
